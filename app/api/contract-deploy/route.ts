import { NextRequest, NextResponse } from "next/server";
import { metadata } from "../../../model/SmartContractMetadata";
import environmentSetup from "../../../lib/client";
import { ContractCreateFlow } from "@hashgraph/sdk";
import fs from 'fs';

async function createContract() {
    try {
        const client = await environmentSetup();
        
        const bytecode =
          "6080604052348015600e575f5ffd5b50335f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e328061005b5f395ff3fe60806040526004361061007e575f3560e01c806391c9b2681161004d57806391c9b26814610139578063a60dc38a14610177578063adfe0f1e146101b3578063dcd7c36f146101e35761007f565b806312065fe0146100815780633e325d47146100ab5780638763ad1e146100e75780638da5cb5b1461010f5761007f565b5b005b34801561008c575f5ffd5b5061009561021f565b6040516100a29190610662565b60405180910390f35b3480156100b6575f5ffd5b506100d160048036038101906100cc91906106ed565b61022e565b6040516100de9190610662565b60405180910390f35b3480156100f2575f5ffd5b5061010d600480360381019061010891906107bc565b61025b565b005b34801561011a575f5ffd5b506101236103d8565b604051610130919061083c565b60405180910390f35b348015610144575f5ffd5b5061015f600480360381019061015a919061098d565b6103fc565b60405161016e939291906109f4565b60405180910390f35b348015610182575f5ffd5b5061019d60048036038101906101989190610a29565b610459565b6040516101aa9190610662565b60405180910390f35b6101cd60048036038101906101c891906106ed565b610472565b6040516101da9190610a6e565b60405180910390f35b3480156101ee575f5ffd5b5061020960048036038101906102049190610a29565b610631565b6040516102169190610662565b60405180910390f35b5f61022947610631565b905090565b5f60018383604051610241929190610ab5565b908152602001604051809103902060020154905092915050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e090610b27565b60405180910390fd5b60405180606001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020015f8152506001858560405161032c929190610ab5565b90815260200160405180910390205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050507fbac4a36b9e4b1dd2cce3e81cdfd9953f7ca0072d8f9143b55d2f906252940486848484846040516103ca9493929190610b71565b60405180910390a150505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818051602081018201805184825260208301602085012081835280955050505050505f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b5f6402540be4008261046b9190610bdc565b9050919050565b5f5f34116104b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ac90610c67565b60405180910390fd5b5f600184846040516104c8929190610ab5565b90815260200160405180910390205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f8173ffffffffffffffffffffffffffffffffffffffff163460405161051f90610cb2565b5f6040518083038185875af1925050503d805f8114610559576040519150601f19603f3d011682016040523d82523d5f602084013e61055e565b606091505b50509050806105a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059990610d10565b60405180910390fd5b5f6105ac34610631565b905080600187876040516105c1929190610ab5565b90815260200160405180910390206002015f8282546105e09190610d2e565b925050819055507f84190e95a7b70518f9da3920f70f92cc5cb7393433d82d97af92a5b745428d4e8686833360405161061c9493929190610d61565b60405180910390a16001935050505092915050565b5f6402540be400826106439190610dcc565b9050919050565b5f819050919050565b61065c8161064a565b82525050565b5f6020820190506106755f830184610653565b92915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f8401126106ad576106ac61068c565b5b8235905067ffffffffffffffff8111156106ca576106c9610690565b5b6020830191508360018202830111156106e6576106e5610694565b5b9250929050565b5f5f6020838503121561070357610702610684565b5b5f83013567ffffffffffffffff8111156107205761071f610688565b5b61072c85828601610698565b92509250509250929050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61076182610738565b9050919050565b61077181610757565b811461077b575f5ffd5b50565b5f8135905061078c81610768565b92915050565b61079b8161064a565b81146107a5575f5ffd5b50565b5f813590506107b681610792565b92915050565b5f5f5f5f606085870312156107d4576107d3610684565b5b5f85013567ffffffffffffffff8111156107f1576107f0610688565b5b6107fd87828801610698565b945094505060206108108782880161077e565b9250506040610821878288016107a8565b91505092959194509250565b61083681610757565b82525050565b5f60208201905061084f5f83018461082d565b92915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61089f82610859565b810181811067ffffffffffffffff821117156108be576108bd610869565b5b80604052505050565b5f6108d061067b565b90506108dc8282610896565b919050565b5f67ffffffffffffffff8211156108fb576108fa610869565b5b61090482610859565b9050602081019050919050565b828183375f83830152505050565b5f61093161092c846108e1565b6108c7565b90508281526020810184848401111561094d5761094c610855565b5b610958848285610911565b509392505050565b5f82601f8301126109745761097361068c565b5b813561098484826020860161091f565b91505092915050565b5f602082840312156109a2576109a1610684565b5b5f82013567ffffffffffffffff8111156109bf576109be610688565b5b6109cb84828501610960565b91505092915050565b5f6109de82610738565b9050919050565b6109ee816109d4565b82525050565b5f606082019050610a075f8301866109e5565b610a146020830185610653565b610a216040830184610653565b949350505050565b5f60208284031215610a3e57610a3d610684565b5b5f610a4b848285016107a8565b91505092915050565b5f8115159050919050565b610a6881610a54565b82525050565b5f602082019050610a815f830184610a5f565b92915050565b5f81905092915050565b5f610a9c8385610a87565b9350610aa9838584610911565b82840190509392505050565b5f610ac1828486610a91565b91508190509392505050565b5f82825260208201905092915050565b7f556e617574686f726973656420616363657373000000000000000000000000005f82015250565b5f610b11601383610acd565b9150610b1c82610add565b602082019050919050565b5f6020820190508181035f830152610b3e81610b05565b9050919050565b5f610b508385610acd565b9350610b5d838584610911565b610b6683610859565b840190509392505050565b5f6060820190508181035f830152610b8a818688610b45565b9050610b99602083018561082d565b610ba66040830184610653565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610be68261064a565b9150610bf18361064a565b9250828202610bff8161064a565b91508282048414831517610c1657610c15610baf565b5b5092915050565b7f4d7573742073656e6420484241520000000000000000000000000000000000005f82015250565b5f610c51600e83610acd565b9150610c5c82610c1d565b602082019050919050565b5f6020820190508181035f830152610c7e81610c45565b9050919050565b5f81905092915050565b50565b5f610c9d5f83610c85565b9150610ca882610c8f565b5f82019050919050565b5f610cbc82610c92565b9150819050919050565b7f4661696c656420746f2073656e642048424152000000000000000000000000005f82015250565b5f610cfa601383610acd565b9150610d0582610cc6565b602082019050919050565b5f6020820190508181035f830152610d2781610cee565b9050919050565b5f610d388261064a565b9150610d438361064a565b9250828201905080821115610d5b57610d5a610baf565b5b92915050565b5f6060820190508181035f830152610d7a818688610b45565b9050610d896020830185610653565b610d96604083018461082d565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f610dd68261064a565b9150610de18361064a565b925082610df157610df0610d9f565b5b82820490509291505056fea2646970667358221220c72cbb4d5e5f89d89dedb755c9439f7034ce8fd907a32c07a2eaa4d4e9a1decb64736f6c634300081e0033";

        const createContract = new ContractCreateFlow()
            .setGas(870000)
            .setBytecode(bytecode);

        const createContractTx = await createContract.execute(client);
        const createContractRx = await createContractTx.getReceipt(client);
        const contractId = createContractRx.contractId;

        console.log(`Contract created with ID: ${contractId} \n`);

        return contractId;
    } catch (err) {
        console.log(err);
        throw new Error('Contract creation Failed');
    }
}

export async function GET(req: NextRequest) {
    try {
        const contractId = await createContract();
        console.log(contractId);

        if (!contractId) {
            return NextResponse.json({ message: "ContractId not found" }, { status: 404 });
        }

        const smartContractFile = await fs.readFileSync('./model/SmartContract.sol', 'utf8');
        const metadataString = JSON.stringify(metadata);
        
        const body = JSON.stringify({
            address: `0x${contractId.toEvmAddress()}`,
            chain: '296',
            files: {
                "metadata.json": metadataString,
                "FundProjects.sol": smartContractFile,
            }
        });
        const result = await fetch('https://server-verify.hashscan.io/verify', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body
        })
        .then(response => {
            return response.json();
        })
        .catch(error => {
            console.log(error);
            throw new Error('Verification Falied');
        });

        return NextResponse.json({ success: true, contractId: `${contractId.realm}.${contractId.shard}.${contractId.num}` }, 
            { status: 201 });
    } catch (err) {
        console.log(err);
        return NextResponse.json({ success: false, error: err }, { status: 500 });
    }
}